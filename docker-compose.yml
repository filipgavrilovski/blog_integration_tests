version: '3'
volumes:
  redis_data:
  pg_data:
  screenshots:
services:
  postgres_db:
    image: postgres:13.6-alpine
    volumes:
      - pg_data:/var/lib/postgresql/data
    user: ${DATABASE_USER:-postgres}
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    command: redis-server
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
  sidekiq:
    env_file: .docker/api.env
    image: mretsorg/m-rets-api:${API_TAG_NAME:-latest}
    pull_policy: always
    depends_on:
      postgres_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: bundle exec sidekiq -c 1
  api:
    env_file: .docker/api.env
    image: mretsorg/m-rets-api:${API_TAG_NAME:-latest}
    pull_policy: always
    depends_on:
      - postgres_db
      - redis
      - sidekiq
      - mailcatcher
    links:
      - postgres_db
      - redis
      - mailcatcher
    stdin_open: true
    tty: true
    command: bundle exec rails s -p 3333 -b '0.0.0.0'
    ports:
      - '3333:3333'
    expose: [3333]
  mailcatcher:
    restart: on-failure:10
    platform: linux/x86_64
    image: dockage/mailcatcher:latest
    ports:
      - '1080:1080'
      - '1025:1025'
  frontend:
    env_file: .docker/frontend.env
    image: mretsorg/m-rets-frontend:${FRONTEND_TAG_NAME:-latest_integration}
    pull_policy: always
    depends_on:
      - api
    ports:
      - '80:3334'
    command: ['nginx', '-g', 'daemon off;']
  nginx:
    depends_on:
      - frontend
      - api
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./nginx
    links:
      - frontend
      - api
    ports:
      - '8080:8080'
    expose:
      - '8080'
  cypress:
    image: mretsorg/cypress-tests:latest
    volumes:
      - ./screenshots:/integration_tests/cypress/screenshots
      - ./testReports:/integration_tests/cypress/reports
    pull_policy: always
    depends_on:
      - frontend
      - api
      - nginx
    links:
      - frontend
      - api
      - nginx
    # Here we have to update the command to run the correct integration test @something
    command: npx cypress run --config-file configs/ui/cy.config-docker.js --env grepTags='@pr'
